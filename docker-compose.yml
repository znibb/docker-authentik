services:
  server:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG:?}
    container_name: authentik-server
    restart: unless-stopped
    user: ${PUID:?}:${PGID:?}
    command: server
    environment:
      AUTHENTIK_LOG_LEVEL: warning # debug/info/warning/error
      AUTHENTIK_REDIS__HOST: authentik-cache
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:?}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB:?}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD:?}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?}
      AUTHENTIK_EMAIL__HOST: ${EMAIL_HOST:?}
      AUTHENTIK_EMAIL__PORT: ${EMAIL_PORT:?}
      AUTHENTIK_EMAIL__USE_TLS: ${EMAIL_USE_TLS:?}
      AUTHENTIK_EMAIL__USE_SSL: ${EMAIL_USE_SSL:?}
      AUTHENTIK_EMAIL__TIMEOUT: ${EMAIL_TIMEOUT:?}
      AUTHENTIK_EMAIL__FROM: ${EMAIL_USERNAME:?}
      AUTHENTIK_EMAIL__USERNAME: ${EMAIL_USERNAME:?}
      AUTHENTIK_EMAIL__PASSWORD: ${EMAIL_PASSWORD:?}  
    labels:
      - traefik.enable=true
      - traefik.http.services.authentik.loadbalancer.server.port=9000
      - traefik.http.routers.authentik.rule=Host(`auth.${TRAEFIK_DOMAIN:?}`)
      - traefik.http.routers.authentik.entrypoints=https
      - traefik.http.routers.authentik.tls=true
      - traefik.http.routers.authentik.tls.certresolver=cloudflare
      - traefik.http.routers.authentik.middlewares=default@file
    networks:
      - authentik
      - traefik
    ports:
      - 9000:9000
    volumes:
      - ./data/custom-templates:/templates
      - ./data/media:/media
    depends_on:
      - db
      - cache

  worker:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG:?}
    container_name: authentik-worker
    restart: unless-stopped
    user: ${PUID:?}:${PGID:?}
    command: worker
    environment:
      AUTHENTIK_LOG_LEVEL: warning # debug/info/warning/error
      AUTHENTIK_REDIS__HOST: authentik-cache
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:?}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB:?}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD:?}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?}
      AUTHENTIK_EMAIL__HOST: ${EMAIL_HOST:?}
      AUTHENTIK_EMAIL__PORT: ${EMAIL_PORT:?}
      AUTHENTIK_EMAIL__USE_TLS: ${EMAIL_USE_TLS:?}
      AUTHENTIK_EMAIL__USE_SSL: ${EMAIL_USE_SSL:?}
      AUTHENTIK_EMAIL__TIMEOUT: ${EMAIL_TIMEOUT:?}
      AUTHENTIK_EMAIL__FROM: ${EMAIL_USERNAME:?}
      AUTHENTIK_EMAIL__USERNAME: ${EMAIL_USERNAME:?}
      AUTHENTIK_EMAIL__PASSWORD: ${EMAIL_PASSWORD:?}
    networks:
      - authentik
    volumes:
      - ./data/certs:/certs
      - ./data/custom-templates:/templates
      - ./data/media:/media
    depends_on:
      - db
      - cache

  cache:
    image: valkey/valkey:8.1.2-alpine
    container_name: authentik-cache
    # command: --save 60 1 --loglevel warning
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
    #   start_period: 20s
    #   interval: 30s
    #   retries: 5
    #   timeout: 3s
    networks:
      - authentik
    volumes:
      - cache:/data/

  db:
    image: postgres:17.5-alpine
    container_name: authentik-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB:?} -U $${POSTGRES_USER:?}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?}
      POSTGRES_DB: ${POSTGRES_DB:?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?}
    networks:
      - authentik
    volumes:
      - db:/var/lib/postgresql/data

networks:
  authentik:
    name: authentik
  traefik:
    external: true

volumes:
  cache:
    name: authentik-cache
  db:
    name: authentik-db